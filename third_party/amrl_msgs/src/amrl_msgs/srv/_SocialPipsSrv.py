# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from amrl_msgs/SocialPipsSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import amrl_msgs.msg

class SocialPipsSrvRequest(genpy.Message):
  _md5sum = "052818ab8e58241ff3fff1fb3eabf54a"
  _type = "amrl_msgs/SocialPipsSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Pose2Df[] robot_poses
Pose2Df[] robot_vels
Pose2Df[] human_poses
Pose2Df[] human_vels
Pose2Df goal_pose
Pose2Df local_target
Pose2Df door_pose
uint8 door_state
# 0 = GoAlone
# 1 = Halt
# 2 = Follow
# 3 = Pass
uint8 robot_state
# -1 is no target, otherwise index of target
int32 follow_target

================================================================================
MSG: amrl_msgs/Pose2Df
float32 x
float32 y
float32 theta"""
  __slots__ = ['robot_poses','robot_vels','human_poses','human_vels','goal_pose','local_target','door_pose','door_state','robot_state','follow_target']
  _slot_types = ['amrl_msgs/Pose2Df[]','amrl_msgs/Pose2Df[]','amrl_msgs/Pose2Df[]','amrl_msgs/Pose2Df[]','amrl_msgs/Pose2Df','amrl_msgs/Pose2Df','amrl_msgs/Pose2Df','uint8','uint8','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_poses,robot_vels,human_poses,human_vels,goal_pose,local_target,door_pose,door_state,robot_state,follow_target

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SocialPipsSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_poses is None:
        self.robot_poses = []
      if self.robot_vels is None:
        self.robot_vels = []
      if self.human_poses is None:
        self.human_poses = []
      if self.human_vels is None:
        self.human_vels = []
      if self.goal_pose is None:
        self.goal_pose = amrl_msgs.msg.Pose2Df()
      if self.local_target is None:
        self.local_target = amrl_msgs.msg.Pose2Df()
      if self.door_pose is None:
        self.door_pose = amrl_msgs.msg.Pose2Df()
      if self.door_state is None:
        self.door_state = 0
      if self.robot_state is None:
        self.robot_state = 0
      if self.follow_target is None:
        self.follow_target = 0
    else:
      self.robot_poses = []
      self.robot_vels = []
      self.human_poses = []
      self.human_vels = []
      self.goal_pose = amrl_msgs.msg.Pose2Df()
      self.local_target = amrl_msgs.msg.Pose2Df()
      self.door_pose = amrl_msgs.msg.Pose2Df()
      self.door_state = 0
      self.robot_state = 0
      self.follow_target = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.robot_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_poses:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      length = len(self.robot_vels)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_vels:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      length = len(self.human_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.human_poses:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      length = len(self.human_vels)
      buff.write(_struct_I.pack(length))
      for val1 in self.human_vels:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      _x = self
      buff.write(_get_struct_9f2Bi().pack(_x.goal_pose.x, _x.goal_pose.y, _x.goal_pose.theta, _x.local_target.x, _x.local_target.y, _x.local_target.theta, _x.door_pose.x, _x.door_pose.y, _x.door_pose.theta, _x.door_state, _x.robot_state, _x.follow_target))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_poses is None:
        self.robot_poses = None
      if self.robot_vels is None:
        self.robot_vels = None
      if self.human_poses is None:
        self.human_poses = None
      if self.human_vels is None:
        self.human_vels = None
      if self.goal_pose is None:
        self.goal_pose = amrl_msgs.msg.Pose2Df()
      if self.local_target is None:
        self.local_target = amrl_msgs.msg.Pose2Df()
      if self.door_pose is None:
        self.door_pose = amrl_msgs.msg.Pose2Df()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_poses = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.robot_poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_vels = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.robot_vels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human_poses = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.human_poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human_vels = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.human_vels.append(val1)
      _x = self
      start = end
      end += 42
      (_x.goal_pose.x, _x.goal_pose.y, _x.goal_pose.theta, _x.local_target.x, _x.local_target.y, _x.local_target.theta, _x.door_pose.x, _x.door_pose.y, _x.door_pose.theta, _x.door_state, _x.robot_state, _x.follow_target,) = _get_struct_9f2Bi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.robot_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_poses:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      length = len(self.robot_vels)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_vels:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      length = len(self.human_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.human_poses:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      length = len(self.human_vels)
      buff.write(_struct_I.pack(length))
      for val1 in self.human_vels:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.theta))
      _x = self
      buff.write(_get_struct_9f2Bi().pack(_x.goal_pose.x, _x.goal_pose.y, _x.goal_pose.theta, _x.local_target.x, _x.local_target.y, _x.local_target.theta, _x.door_pose.x, _x.door_pose.y, _x.door_pose.theta, _x.door_state, _x.robot_state, _x.follow_target))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_poses is None:
        self.robot_poses = None
      if self.robot_vels is None:
        self.robot_vels = None
      if self.human_poses is None:
        self.human_poses = None
      if self.human_vels is None:
        self.human_vels = None
      if self.goal_pose is None:
        self.goal_pose = amrl_msgs.msg.Pose2Df()
      if self.local_target is None:
        self.local_target = amrl_msgs.msg.Pose2Df()
      if self.door_pose is None:
        self.door_pose = amrl_msgs.msg.Pose2Df()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_poses = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.robot_poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_vels = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.robot_vels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human_poses = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.human_poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human_vels = []
      for i in range(0, length):
        val1 = amrl_msgs.msg.Pose2Df()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.theta,) = _get_struct_3f().unpack(str[start:end])
        self.human_vels.append(val1)
      _x = self
      start = end
      end += 42
      (_x.goal_pose.x, _x.goal_pose.y, _x.goal_pose.theta, _x.local_target.x, _x.local_target.y, _x.local_target.theta, _x.door_pose.x, _x.door_pose.y, _x.door_pose.theta, _x.door_state, _x.robot_state, _x.follow_target,) = _get_struct_9f2Bi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_9f2Bi = None
def _get_struct_9f2Bi():
    global _struct_9f2Bi
    if _struct_9f2Bi is None:
        _struct_9f2Bi = struct.Struct("<9f2Bi")
    return _struct_9f2Bi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from amrl_msgs/SocialPipsSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SocialPipsSrvResponse(genpy.Message):
  _md5sum = "b028501ac85c840a01d50342b4cc9b6e"
  _type = "amrl_msgs/SocialPipsSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 action

"""
  __slots__ = ['action']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SocialPipsSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action is None:
        self.action = 0
    else:
      self.action = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.action
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.action,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.action
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.action,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class SocialPipsSrv(object):
  _type          = 'amrl_msgs/SocialPipsSrv'
  _md5sum = '5aa4c05a0d89a6541e472d48f0f846f8'
  _request_class  = SocialPipsSrvRequest
  _response_class = SocialPipsSrvResponse

<?xml version="1.0"?>
<launch>
  <arg name="namespace" default="/hsrb"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="true" />
  <arg name="rviz" default="true"/>
  <arg name="gazebo_visualization" default="false" />
  <arg name="paused" default="true" />
  <arg name="husky_x" default=".0"/>
  <arg name="husky_y" default ="-4.0"/> 
  <arg name="spot_x" default=".0"/>
  <arg name="spot_y" default ="-2.0"/> 
  <arg name="spot2_x" default="0.0"/>
  <arg name="spot2_y" default ="2.0"/> 
  <arg name="world" default="gazebo"/>
  <arg name="use_sim_time" default="true"/>

 <arg name="ahg_sim" default="true" />
  <arg name="world_name" value="$(find tmp)/worlds/disaster.world"/>
  <arg name="map" default="$(find tmp)/maps/disaster.yaml" />
  <param name="/use_sim_time" value="true"/>
  <arg name="param_file" default="$(optenv HOME ~)/.ros/params.yaml" />

  <rosparam file="$(find search_service)/config/ahg.yaml"/>

  <node name="$(arg world)" pkg="gazebo_ros" type="gzserver" args="$(find tmp)/worlds/disaster.world" respawn="false" output="screen" launch-prefix="$(optenv OPTIRUN_LAUNCH_PREFIX)"/>
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen" launch-prefix="$(optenv OPTIRUN_LAUNCH_PREFIX)"/>
  </group>


  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map)"/>

  <!-- Clicked Point Agent -->
  <arg name="clickpoint_namespace"  default="husky"/>

  <include file="$(find husky_gazebo)/launch/spawn_husky.launch"/>

  <include file="$(find husky_navigation)/launch/amcl_disaster.launch"/>



  <!-- First Agent -->
  <arg name="spot_namespace"  default="spot"/>
  <group ns ="$(arg spot_namespace)">
      <param name="robot_description" command="$(find xacro)/xacro --inorder $(find spot_description)/urdf/spot.urdf.xacro"/>

  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map)"/>
  <!--<node name="map_server" pkg="map_server" type="map_server" args="$(find tmp)/maps/disaster.yaml"/>-->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <rosparam param="source_list">["/spot/joint_states"]</rosparam>
  </node>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
      <param name="tf_prefix" type="string" value="$(arg spot_namespace)" />
  </node>
  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model spot -x $(arg spot_x) -y $(arg spot_y) -R 0 -P 0 -Y 0 " output="screen"/>

  <include file="$(find spot_gazebo)/launch/velodyne_2d.launch">
      <arg name="tf_prefix" value="$(arg spot_namespace)"/>
  </include>


 <include file="$(find tmp)/launch/amcl_diff.xml">
      <arg name="namespace" value="$(arg spot_namespace)"/>
      <arg name="pos_x" value="$(arg spot_x)"/>
      <arg name="pos_y" value="$(arg spot_y)"/>
      </include>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find tmp)/config/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
    <rosparam file="$(find tmp)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find tmp)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find tmp)/config/global_costmap_params.yaml" command="load" /> 
    <rosparam file="$(find tmp)/config/base_local_planner_params.yaml" command="load" />
    <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
 </node>
  </group>


  <!-- Second Agent -->
  <arg name="spot2_namespace"  default="spot2"/>
  <group ns ="$(arg spot2_namespace)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find spot_description)/urdf/spot.urdf.xacro"/>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <rosparam param="source_list">["/spot/joint_states"]</rosparam>
  </node>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
      <param name="tf_prefix" type="string" value="$(arg spot2_namespace)" />
  </node>
  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model spot2 -x $(arg spot2_x) -y $(arg spot2_y) -z 0.4 -R 0 -P 0 -Y 0" output="screen"/>

  <include file="$(find spot_gazebo)/launch/velodyne_2d.launch">
      <arg name="tf_prefix" value="$(arg spot2_namespace)"/>
  </include>

  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map)"/>
  <!--<node name="map_server" pkg="map_server" type="map_server" args="$(find tmp)/maps/disaster.yaml"/>-->

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find tmp)/config/costmap_common_params_spot2.yaml" command="load" ns="global_costmap" /> 
    <rosparam file="$(find tmp)/config/costmap_common_params_spot2.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find tmp)/config/local_costmap_params_spot2.yaml" command="load" />
    <rosparam file="$(find tmp)/config/global_costmap_params_spot2.yaml" command="load" /> 
    <rosparam file="$(find tmp)/config/base_local_planner_params.yaml" command="load" />
    <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
 </node>

    <include file="$(find tmp)/launch/amcl_diff.xml">
      <arg name="namespace" value="$(arg spot2_namespace)"/>
      <arg name="pos_x" value="$(arg spot2_x)"/>
      <arg name="pos_y" value="$(arg spot2_y)"/>
    </include>


  </group>

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find tmp)/config/spot.rviz" if="$(arg rviz)"/>

</launch>

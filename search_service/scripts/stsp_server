#!/usr/bin/env python
import sys
import roslib
import rospy
import math
import actionlib
import os
from nav_msgs.msg import Odometry, Path
from geometry_msgs.msg import PoseStamped, Point, Quaternion, Pose, PoseArray
from search_service.msg import SingleTSPSolveAction, SingleTSPSolveFeedback, SingleTSPSolveResult
import csv
from actionlib_msgs.msg import GoalStatus
from mtsp import tsp_manager

class single_tspmanager(object):
    def __init__(self, name, wait=0.0):
        self._action_name=name
        self._as = actionlib.SimpleActionServer(self._action_name, SingleTSPSolveAction, execute_cb=self.execute_cb, auto_start = False)
        self.feedback_ = SingleTSPSolveFeedback()
        self.result_= SingleTSPSolveResult()
        self._as.start()
        rospy.loginfo("single_tsp_solve_action_server started")
        self.starter()
        self.waypoints=[]
        self.center=None

    #Input: num_agent, poses, clusters
    #Output: array of paths for each agent

    def execute_cb(self, goal):
        rospy.loginfo("---")
        rospy.loginfo("single_tsp_solve execute_cb")
        #Save clustered pose array to cluster_goals
        self.waypoints=[]
        for pos in goal.waypoints.poses:
            self.waypoints.append([pos.position.x , pos.position.y])

        self.center=[goal.pose.position.x, goal.pose.position.y]
        #Solving Traveling Salesman Problem 
        tspmanager = tsp_manager(1, self.waypoints, self.center) #individual tsp problem 
        best_tsppath = tspmanager.get_path()

        bestpath = best_tsppath[0]
        print("bestpath", bestpath)
        path_msg=Path()
        path_msg.header.frame_id = "map"
        path_msg.header.stamp= rospy.Time().now()
        for pt_ in bestpath:
            tmp_pose = PoseStamped()
            tmp_pose.header.frame_id="map"
            tmp_pose.pose.position.x=self.waypoints[pt_][0]
            tmp_pose.pose.position.y=self.waypoints[pt_][1]
            tmp_pose.pose.orientation.w=1.0
            path_msg.poses.append(tmp_pose)

        self.result_.path=path_msg
        self.result_.sucess=True
        self._as.set_succeeded(self.result_)
        rospy.loginfo("Single-TSP-Solve action is completed")


    def starter(self,wait=0.0):
        while not rospy.is_shutdown():
            rospy.sleep(2.0)

if __name__ == '__main__':
    rospy.init_node('single_tsp_action')
    tsp_manager_ = single_tspmanager(rospy.get_name())

































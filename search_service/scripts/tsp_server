#!/usr/bin/env python
import sys
import roslib
import rospy
import math
import actionlib
import os
from nav_msgs.msg import Odometry, Path
from geometry_msgs.msg import PoseStamped, Point, Quaternion, Pose, PoseArray
from search_service.msg import TSPSolveAction, TSPSolveFeedback, TSPSolveResult
import csv
from actionlib_msgs.msg import GoalStatus
from mtsp import tsp_manager
# import pandas as pd

class tspmanager(object):
    def __init__(self, name, wait=0.0):
        self._action_name=name

        self._as = actionlib.SimpleActionServer(self._action_name, TSPSolveAction, execute_cb=self.execute_cb, auto_start = False)
        self.feedback_ = TSPSolveFeedback()
        self.result_= TSPSolveResult()

        self._as.start()
        rospy.loginfo("tsp_solve_action_server started")
        self.starter()

        self.num_agent=2
        self.centers=None
        self.cluster_goals=None

    #Input: num_agent, poses, clusters
    #Output: array of paths for each agent
    def execute_cb(self, goal):
        rospy.loginfo("tsp_solve execute_cb")
        self.num_agent=goal.num_agent

        #Save clustered pose array to cluster_goals
        self.cluster_goals=[[] for j in range(self.num_agent)]
        for j in range(self.num_agent):
            for pos in goal.clusters[j].poses:
                self.cluster_goals[j].append([pos.position.x , pos.position.y])

        #Save the position of each agent to then centers
        self.centers=[[]for j in range(self.num_agent)]
        for i in range(self.num_agent):
            self.centers[i]=[goal.poses.poses[i].position.x, goal.poses.poses[i].position.y]
        
  
        #Solving Traveling Salesman Problem 
        tsp_paths=[]
        for i in range(self.num_agent):
            tspmanager = tsp_manager(1, self.cluster_goals[i], self.centers[i]) #individual tsp problem 
            best_tsppath = tspmanager.get_path()
            tsp_paths.append(best_tsppath[0])
        print("tsp_paths", tsp_paths)


        #Save to the nav_msgs/Path 
        self.result_.paths=[]
        for agent_idx, paths in enumerate(tsp_paths):
            path_msg=Path()
            path_msg.header.frame_id = "map"
            path_msg.header.stamp= rospy.Time().now()
            for pt_ in paths:
                tmp_pose = PoseStamped()
                tmp_pose.header.frame_id="map"
                tmp_pose.pose.position.x=self.cluster_goals[agent_idx][pt_][0]
                tmp_pose.pose.position.y=self.cluster_goals[agent_idx][pt_][1]
                tmp_pose.pose.orientation.w=1.0
                path_msg.poses.append(tmp_pose)
            self.result_.paths.append(path_msg)
     

        self.result_.sucess=True
        self._as.set_succeeded(self.result_)
        rospy.loginfo("TSP-Solve action is completed")

    def starter(self,wait=0.0):
        # make sure the cont0roller is running
        while not rospy.is_shutdown():
            rospy.sleep(2.0)

          
if __name__ == '__main__':
    rospy.init_node('tsp_solve_action')
    tsp_manager_ = tspmanager('tsp_solve_action')
































